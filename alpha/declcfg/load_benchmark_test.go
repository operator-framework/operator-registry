package declcfg_test

import (
	"context"
	"encoding/base64"
	"fmt"
	"math/rand"
	"os"
	"runtime"
	"testing"

	"github.com/blang/semver/v4"
	"github.com/operator-framework/api/pkg/lib/version"
	"github.com/operator-framework/api/pkg/operators/v1alpha1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	"github.com/operator-framework/operator-registry/alpha/declcfg"
	"github.com/operator-framework/operator-registry/alpha/property"
)

func BenchmarkLoadFS(b *testing.B) {
	fbc := generateFBC(b, 300, 450, 3000)
	b.ResetTimer()

	for _, n := range []int{1, runtime.NumCPU(), 2 * runtime.NumCPU()} {
		b.Run(fmt.Sprintf("%d routines", n), func(b *testing.B) {
			for i := 0; i < b.N; i++ {
				b.StopTimer()
				tempDir := b.TempDir()
				if err := declcfg.WriteFS(*fbc, tempDir, declcfg.WriteJSON, ".json"); err != nil {
					b.Error(err)
				}
				b.StartTimer()

				_, err := declcfg.LoadFS(context.Background(), os.DirFS(tempDir), declcfg.WithConcurrency(n))
				if err != nil {
					b.Error(err)
				}
			}
		})
	}
}

const randomPng = ""

func generateFBC(b *testing.B, numPackages, numChannels, numBundles int) *declcfg.DeclarativeConfig {
	pngData, err := base64.StdEncoding.DecodeString(randomPng)
	if err != nil {
		b.Error(err)
	}

	fbc := &declcfg.DeclarativeConfig{}

	for i := 0; i < numPackages; i++ {
		pkgName := fmt.Sprintf("pkg-%d", i)
		fbc.Packages = append(fbc.Packages, declcfg.Package{
			Schema:      declcfg.SchemaPackage,
			Name:        pkgName,
			Description: fmt.Sprintf("%s description", pkgName),
			Icon: &declcfg.Icon{
				Data:      pngData,
				MediaType: "image/png",
			},
		})
	}
	for i := 0; i < numChannels; i++ {
		pkgName := fbc.Packages[rand.Intn(numPackages)].Name
		channelName := fmt.Sprintf("channel-%d", i)
		fbc.Channels = append(fbc.Channels, declcfg.Channel{
			Schema:  declcfg.SchemaChannel,
			Package: pkgName,
			Name:    channelName,
		})
	}
	for i := 0; i < numBundles; i++ {
		pkgName := fbc.Packages[rand.Intn(numPackages)].Name
		bundleName := fmt.Sprintf("bundle-%d", i)
		version := fmt.Sprintf("0.%d.0", i)
		bundle := declcfg.Bundle{
			Schema:  declcfg.SchemaBundle,
			Package: pkgName,
			Image:   fmt.Sprintf("bundles/%s", bundleName),
			Properties: []property.Property{
				property.MustBuildPackage(pkgName, version),
				property.MustBuildGVK("apps", "Deployment", "v1"),
				property.MustBuildGVK("apps", "DaemonSet", "v1"),
				property.MustBuildGVKRequired("", "Service", "v1"),
				property.MustBuildPackageRequired("foo", "0.0.1"),
			},
		}

		csv := genCsv(pkgName, version)
		bundle.Properties = append(bundle.Properties, property.MustBuildCSVMetadata(csv))
		fbc.Bundles = append(fbc.Bundles, bundle)

		chIdx := rand.Intn(numChannels)
		ch := fbc.Channels[chIdx]
		replaces := ""
		if len(ch.Entries) > 0 {
			replaces = ch.Entries[len(ch.Entries)-1].Name
		}
		ch.Entries = append(ch.Entries, declcfg.ChannelEntry{
			Name:     bundleName,
			Replaces: replaces,
		})
		fbc.Channels[chIdx] = ch
	}

	return fbc
}

func genCsv(pkgName, ver string) v1alpha1.ClusterServiceVersion {
	csv := v1alpha1.ClusterServiceVersion{
		TypeMeta: metav1.TypeMeta{
			Kind:       "ClusterServiceVersion",
			APIVersion: "operators.coreos.com/v1alpha1",
		},
		ObjectMeta: metav1.ObjectMeta{
			Name: fmt.Sprintf("%s.v%s", pkgName, ver),
			Annotations: map[string]string{
				"alm-examples": `[
					{
						"apiVersion": "example.com/v1alpha1",
						"kind": "Example",
						"metadata": {
							"name": "example-sample"
						},
						"spec": {
							"image":{
								"repository":"example/example",
								"tag":"v0.0.1",
								"pullPolicy":"IfNotPresent",
								"credentials":{}
							},
							"labels":{},
							"conf":{
								"log":{"enabled":false,"config":{}},
								"logtostderr":"INFO",
								"port":26257,
								"http-port":8080,
								"store":{"enabled":false,"type":null,"size":null,"attrs":null}},
								"statefulset":{
									"replicas":3,
									"updateStrategy":{"type":"RollingUpdate"},
									"podManagementPolicy":"Parallel",
									"budget":{"maxUnavailable":1},
									"args":[],
									"env":[],
									"secretMounts":[],
									"labels":{"app.kubernetes.io/component":"example"},
									"annotations":{},
									"nodeAffinity":{},
									"podAffinity":{},
									"podAntiAffinity":{"topologyKey":"kubernetes.io/hostname","type":"soft","weight":100},
									"nodeSelector":{},
									"priorityClassName":"",
									"tolerations":[],
									"topologySpreadConstraints":{"maxSkew":1,"topologyKey":"topology.kubernetes.io/zone","whenUnsatisfiable":"ScheduleAnyway"},
									"resources":{},
									"customLivenessProbe":{},
									"customReadinessProbe":{}
								},
								"ingress":{"enabled":false,"labels":{},"annotations":{},"paths":["/"],"hosts":[],"tls":[]},
								"prometheus":{"enabled":true},
								"serviceMonitor":{"enabled":false,"labels":{},"annotations":{},"interval":"10s","namespaced":false},
								"storage":{"hostPath":"","persistentVolume":{"enabled":true,"size":"100Gi","storageClass":"","labels":{},"annotations":{}}}
							}
						}
					}
				]`,
				"capabilities":                           "Basic Install",
				"categories":                             "Application",
				"certified":                              "false",
				"containerImage":                         "quay.io/example/example:v0.0.1",
				"createdAt":                              "1970-01-01T00-00-00Z",
				"description":                            "Example Operator",
				"operators.operatorframework.io/builder": "operator-sdk-v1.0.0",
				"operators.operatorframework.io/project_layout": "go.sdk.operatorframework.io/v3",
				"repository":    "https://github.com/example/example",
				"support":       "Example, Inc.",
				"olm.skipRange": "<0.0.1",
			},
		},
		Spec: v1alpha1.ClusterServiceVersionSpec{
			Icon: []v1alpha1.Icon{
				{
					Data:      randomPng,
					MediaType: "image/png",
				},
			},
			CustomResourceDefinitions: v1alpha1.CustomResourceDefinitions{
				Owned: []v1alpha1.CRDDescription{
					{
						Description: "Represents an Example instance",
						DisplayName: "Example",
						Kind:        "Example",
						Version:     "v1alpha1",
						Name:        "examples.example.com",
						Resources: []v1alpha1.APIResourceReference{
							{
								Kind:    "Deployment",
								Version: "apps/v1",
							},
							{
								Kind:    "Service",
								Version: "v1",
							},
							{
								Kind:    "ReplicaSet",
								Version: "apps/v1",
							},
							{
								Kind:    "Pod",
								Version: "v1",
							},
							{
								Kind:    "Secret",
								Version: "v1",
							},
							{
								Kind:    "ConfigMap",
								Version: "v1",
							},
							{
								Kind:    "PresistentVolumeClaim",
								Version: "v1",
							},
							{
								Kind:    "StatefulSet",
								Version: "apps/v1",
							},
							{
								Kind:    "Job",
								Version: "batch/v1",
							},
						},
					},
				},
			},
			DisplayName: "Example Operator",
			InstallModes: []v1alpha1.InstallMode{
				{
					Type:      v1alpha1.InstallModeTypeOwnNamespace,
					Supported: false,
				},
				{
					Type:      v1alpha1.InstallModeTypeSingleNamespace,
					Supported: false,
				},
				{
					Type:      v1alpha1.InstallModeTypeMultiNamespace,
					Supported: false,
				},
				{
					Type:      v1alpha1.InstallModeTypeAllNamespaces,
					Supported: true,
				},
			},
			Keywords: []string{"example", "application", "sample", "foobar"},
			Links: []v1alpha1.AppLink{
				{
					Name: "Example Operator",
					URL:  "https://www.example.com/operator",
				},
				{
					Name: "Example Operator Documentation",
					URL:  "https://www.example.com/operator/docs",
				},
				{
					Name: "Example Operator Support",
					URL:  "https://www.example.com/operator/support",
				},
				{
					Name: "Example Operator Source Code",
					URL:  "https://github.com/example/operator",
				},
			},
			Maintainers: []v1alpha1.Maintainer{
				{
					Email: "janedoe@example.com",
					Name:  "Jane Doe",
				},
				{
					Email: "johndoe@example.com",
					Name:  "John Doe",
				},
			},
			Maturity:       "alpha",
			MinKubeVersion: "1.21.0",
			Provider: v1alpha1.AppLink{
				Name: "Example, Inc.",
				URL:  "https://www.example.com",
			},
			Version: version.OperatorVersion{Version: semver.MustParse(ver)},
		},
	}
	return csv
}
